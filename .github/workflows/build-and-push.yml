name: Build and Push to ACR

on:
  push:
    branches:
      - main  

env:
  ACR_NAME: publicacrdmsnortheurope
  IMAGE_NAME: GET-todo
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to Azure Container Registry (ACR)
        run: |
          az acr login --name $ACR_NAME

      - name: Build the Docker image
        run: |
          docker build . -t $ACR_LOGIN_SERVER/$IMAGE_NAME:${{ github.sha }} 

      - name: Push the Docker image to ACR
        run: |
          docker push $ACR_LOGIN_SERVER/$IMAGE_NAME:${{ github.sha }}

      - name: List Docker images in ACR
        run: |
          az acr repository show-tags --name $ACR_NAME --repository $IMAGE_NAME

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push  # Ensure deploy only runs if build-and-push is successful

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: SSH to the VM
        uses: appleboy/ssh-action@master
        with:
          host: 10.1.0.4                     # Your VM's IP address
          username: tung                      # Your VM's username
          ssh_key: ${{ secrets.AZURE_SSH_KEY }}  # Your SSH key for authentication
          script: |
            # Update package list and install Docker if not installed
            if ! command -v docker &> /dev/null; then
              echo "Docker not found, installing..."
              sudo apt-get update
              sudo apt-get install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
            else
              echo "Docker is already installed."
            fi

            # Log in to ACR (ensure you have the Azure CLI installed)
            echo "${{ secrets.AZURE_CREDENTIALS }}" | az acr login --name ${{ env.ACR_NAME }}

            # Pull the latest image from ACR
            docker pull ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

            # Stop and remove the old container if it exists
            docker stop your_container_name || true
            docker rm your_container_name || true
            
            # Run the new container
            docker run -d --name your_container_name -p 80:80 ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
